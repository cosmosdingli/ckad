k run nginx --image=nginx

k get po --no-headers | wc -l
k get po -A
k get po -o yaml

k describe po nginx

k delete rs replicaset-1 replicaset-2

k scale rs new-replica-set --replicas=5
k -n finance run redis --image=redis

k create svc clusterip redis-service --tcp=6379:6379
k create deploy webapp --image=kodekloud/webapp-color --replicas=3
k run custom-nginx --image=nginx --dry-run=client -o yaml > po.yaml
k -n dev-ns create deploy redis-deploy --image=redis --replicas=2

#If true, create a ClusterIP service associated with the pod. Requires --port.
k run httpd --image=httpd:alpine --port=80 --expose=true 

#Start the nginx pod using the default command, but use custom arguments (arg1 .. argN) for that command
kubectl run nginx --image=nginx -- <arg1> <arg2> ... <argN>

#Start the nginx pod using a different command and custom arguments
kubectl run nginx --image=nginx --command -- <cmd> <arg1> ... <argN>

#Create a new config map named my-config with key1=config1 and key2=config2
kubectl create configmap my-config --from-literal=key1=config1 --from-literal=key2=config2
k create cm webapp-config-map --from-literal=APP_COLOR=darkblue

#Create a new secret named my-secret with key1=supersecret and key2=topsecret
kubectl create secret generic my-secret --from-literal=key1=supersecret --from-literal=key2=topsecret
kubectl create secret generic db-secret --from-literal=DB_Host=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123

#exec
#Execute a command in a container.
k exec ubuntu-sleeper -- whoami

#Force replace, delete and then re-create the resource
kubectl replace --force -f ./pod.json
k replace --force -f /tmp/kubectl-edit-2138822016.yaml

# 
k replace --force -f /tmp/kubectl-edit-2138822016.yaml

#Service Account
#Taints and Tolerations
kubectl describe node node01 | grep -i taints
#Update node 'foo' with a taint with key 'dedicated' and value 'special-user' and effect 'NoSchedule' 
# If a taint with that key and effect already exists, its value is replaced as specified
kubectl taint nodes foo dedicated=special-user:NoSchedule
kubectl taint nodes node01 spray=mortein:NoSchedule
#Remove from node 'foo' the taint with key 'dedicated' and effect 'NoSchedule' if one exists
kubectl taint nodes foo dedicated:NoSchedule-
# Remove from node 'foo' all the taints with key 'dedicated'
kubectl taint nodes foo dedicated-
kubectl label nodes node01 color=blue

# Show metrics for all nodes
kubectl top node

kubectl get pods --selector env=dev

# ingress networking -1
k get ingress -A
k -n app-space describe ingress ingress-wear-watch 
# Create a single ingress called 'simple' that directs requests to foo.com/bar to svc # svc1:8080 with a tls secret "my-cert"
kubectl create ingress simple --rule="foo.com/bar=svc1:8080,tls=my-cert"
k -n critical-space create ingress ingress-pay --rule="/pay=pay-service:8282"

k -n ingress-space get deploy
k -n ingress-space expose deploy ingress-controller --name ingress --port=80 --target-port=80 --type NodePort

k -n app-space create ingress ingress-wear-watch --rule="/wear=wear-service:8080" --rule="/watch=video-service:8080"
# persistent volumes

# To use that context, run the command: 
kubectl config --kubeconfig=/root/my-kube-config use-context research
# To know the current context, run the command: 
kubectl config --kubeconfig=/root/my-kube-config current-context


# Role Based Access
k -n kube-system describe po kube-apiserver-controlplane 
--authorization-mode
# rolebinding
k -n kube-system describe rolebinding kube-proxy 

kubectl auth can-i list nodes --as michelle

# admission controller
kubectl exec -it kube-apiserver-controlplane -n kube-system -- kube-apiserver -h | grep 'enable-admission-plugins'
grep enable-admission-plugins /etc/kubernetes/manifests/kube-apiserver.yaml

kubectl -n webhook-demo create secret tls webhook-server-tls \
    --cert "/root/keys/webhook-server-tls.crt" \
    --key "/root/keys/webhook-server-tls.key"

kubectl get po pod-with-defaults -o yaml | grep -A2 " securityContext:"